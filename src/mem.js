chip8.CstrMem = (function() {
  var ram = [];

  // Fonts
  var fonts = [
    [0xf, 0x9, 0x9, 0x9, 0xf],
    [0x2, 0x6, 0x2, 0x2, 0x7],
    [0xf, 0x1, 0xf, 0x8, 0xf],
    [0xf, 0x1, 0xf, 0x1, 0xf],
    [0x9, 0x9, 0xf, 0x1, 0x1],
    [0xf, 0x8, 0xf, 0x1, 0xf],
    [0xf, 0x8, 0xf, 0x9, 0xf],
    [0xf, 0x1, 0x2, 0x4, 0x4],
    [0xf, 0x9, 0xf, 0x9, 0xf],
    [0xf, 0x9, 0xf, 0x1, 0xf],
    [0xf, 0x9, 0xf, 0x9, 0x9],
    [0xe, 0x9, 0xe, 0x9, 0xe],
    [0xf, 0x8, 0x8, 0x8, 0xf],
    [0xe, 0x9, 0x9, 0x9, 0xe],
    [0xf, 0x8, 0xf, 0x8, 0xf],
    [0xf, 0x8, 0xf, 0x8, 0x8]
  ];

  return {
    reset: function() {
      ioZero(ram, 0x1000);
    },

    upload: function(resp) {
      // Read app as Uint8
      var data = new UintBcap(resp);

      // Write to mem
      for (var i=0; i<data.bLen; i++) {
        ram[0x200 + i] = data[i];
      }
    },

    write: {
      ub: function(addr, data) {
        if (addr >= 0x200 && addr <= 0xfff) {
          ram[addr] = data;
          return;
        }
        emu.exit('Unknown Write 08 -> '+addr);
      }
    },

    read: {
      uh: function(addr) {
        if (addr >= 0x200 && addr <= 0xfff) {
          return (ram[addr]<<8) | ram[addr+1];
        }
        emu.exit('Unknown Read 16 -> '+addr);
        return 0;
      },

      ub: function(addr) {
        if (addr >= 0x200 && addr <= 0xfff) {
          return ram[addr];
        }
        emu.exit('Unknown Read 08 -> '+addr);
        return 0;
      }
    }
  };
})();
